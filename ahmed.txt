// todo (initialization doesn't change how cannon reacts to ninjas)
conclusions: 
*models start differently (means weights have effect with inputs)
*I should be forcing the ninjas generation to be in a particular sequence 




*note: look at how layers are not stored + i checked the layers and they are different
but something is not normal
*note: mutation didn't result into any noticable change + train all cannons with the same 
conditions over and over again (also make sure it's learning something, should
you repeat the same ninjas pattern?, this would be for you to make sure you didn't lose the first path);

*we need to automatically iterate the process + make sure it is correct in the first place
+ mutation + add a condition the one that lives longer gets score of 5 every 4 seconds
*local storage issue (it saves it as layers only not as a an instance of a class)
*make the input layer from the layers
*make sensors + detection for sensors + define gaming over for network;
*button to activate the network
*each cannon should have it own generator and its own sensors

//viualization
* build the visualization
* build the network itself

//  
* add sensors ()




// network todo
* build the network
* cannon will end up throwing bullets till the ninja disappear (which means +1 then -1)

//network issues
*make the model make the decision of moving to right and then increase the angle according to that
*you need the model to be able to know the tip of the cannon;

I should give the network a sign that hitting a ninja is five times better than missing a bullet










//knowledge
* beginPath is when you want to draw like lineTo moveTo arc
* save() and restore() when you want to isolate some drawings environment




//network knowledge:
* It's very difficult to notice how networks behave in random